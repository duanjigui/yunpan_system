/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2017-06-01 15:01:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.manager;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class welcome_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n");
      out.write("<head>\r\n");
      out.write("    <title></title>\r\n");
      out.write("     <style type=\"text/css\">\r\n");
      out.write("        html, body{\r\n");
      out.write("          width: 100%;\r\n");
      out.write("          height: 100%;\r\n");
      out.write("          overflow:hidden;\r\n");
      out.write("          margin: 0;\r\n");
      out.write("          padding: 0;\r\n");
      out.write("        }\r\n");
      out.write("        .container{\r\n");
      out.write("          width: 100%;\r\n");
      out.write("          height: 100%;\r\n");
      out.write("          margin: 0;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("    <script src=\"js/jquery/jquery-1.9.0.min.js\" type=\"text/javascript\"></script> \r\n");
      out.write("</head>\r\n");
      out.write("<body style=\"background: white; font-size: 12px;\"> \r\n");
      out.write(" <div id=\"jsi-cards-container\" class=\"container\"></div>\r\n");
      out.write("\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("        \r\n");
      out.write("        var RENDERER = {\r\n");
      out.write("    ROW : 4,\r\n");
      out.write("    COLUMN : 12,\r\n");
      out.write("    MAX_STATUS_COUNT : 100,\r\n");
      out.write("    MAX_WAITING_COUNT : 30,\r\n");
      out.write("    MAX_STATUS : 8,\r\n");
      out.write("    \r\n");
      out.write("    init : function(){\r\n");
      out.write("        this.setParameters();\r\n");
      out.write("        this.createCards();\r\n");
      out.write("        this.reconstructMethods();\r\n");
      out.write("        this.render();\r\n");
      out.write("    },\r\n");
      out.write("    setParameters : function(){\r\n");
      out.write("        this.$container = $('#jsi-cards-container');\r\n");
      out.write("        this.width = this.$container.width();\r\n");
      out.write("        this.height = this.$container.height();\r\n");
      out.write("        this.$canvas = $('<canvas />').attr({width : this.width, height : this.height}).appendTo(this.$container);\r\n");
      out.write("        this.context = this.$canvas.get(0).getContext('2d');\r\n");
      out.write("        this.cards = [];\r\n");
      out.write("        this.status = 0;\r\n");
      out.write("        this.statusCount = 0;\r\n");
      out.write("        this.waitingCount = 0;\r\n");
      out.write("        this.gradient = this.context.createRadialGradient(this.width / 2, this.height / 2, 0, this.width / 2, this.height / 2, Math.sqrt(Math.pow(this.width / 2, 2) + Math.pow(this.height / 2, 2)));\r\n");
      out.write("        this.gradient.addColorStop(0, 'hsl(210, 100%, 30%)');\r\n");
      out.write("        this.gradient.addColorStop(1, 'hsl(210, 100%, 10%)');\r\n");
      out.write("    },\r\n");
      out.write("    createCards : function(){\r\n");
      out.write("        for(var i = 0; i < this.ROW; i++){\r\n");
      out.write("            for(var j = 0; j < this.COLUMN; j++){\r\n");
      out.write("                this.cards.push(new CARD(this, i, j));\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        this.cards.sort(function(card1, card2){\r\n");
      out.write("            return card2.radian[0] - card1.radian[0];\r\n");
      out.write("        });\r\n");
      out.write("    },\r\n");
      out.write("    reconstructMethods : function(){\r\n");
      out.write("        this.render = this.render.bind(this);\r\n");
      out.write("    },\r\n");
      out.write("    controlStatus : function(){\r\n");
      out.write("        if(++this.statusCount > this.MAX_STATUS_COUNT){\r\n");
      out.write("            if(++this.waitingCount > this.MAX_WAITING_COUNT){\r\n");
      out.write("                if(++this.status > this.MAX_STATUS){\r\n");
      out.write("                    this.status = 1;\r\n");
      out.write("                }\r\n");
      out.write("                this.statusCount = 0;\r\n");
      out.write("                this.waitingCount = 0;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    },\r\n");
      out.write("    easeInOutQuad: function(t){\r\n");
      out.write("        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\r\n");
      out.write("    },\r\n");
      out.write("    render : function(){\r\n");
      out.write("        requestAnimationFrame(this.render);\r\n");
      out.write("        this.context.fillStyle = this.gradient;\r\n");
      out.write("        this.context.fillRect(0, 0, this.width, this.height);\r\n");
      out.write("        var rate = this.easeInOutQuad(Math.min(1, this.statusCount / this.MAX_STATUS_COUNT));\r\n");
      out.write("        \r\n");
      out.write("        for(var i = 0, length = this.cards.length; i < length; i++){\r\n");
      out.write("            this.cards[i].render(this.context, this.status, rate);\r\n");
      out.write("        }\r\n");
      out.write("        this.controlStatus();\r\n");
      out.write("    }\r\n");
      out.write("};\r\n");
      out.write("var CARD = function(renderer, row, column){\r\n");
      out.write("     this.renderer = renderer;\r\n");
      out.write("     this.row = row;\r\n");
      out.write("     this.column = column;\r\n");
      out.write("     this.init();\r\n");
      out.write("};\r\n");
      out.write("CARD.prototype = {\r\n");
      out.write("    WIDTH_RATIO : 1 / 12,\r\n");
      out.write("    HEIGHT_RATIO : 1 / 8,\r\n");
      out.write("    SCALE_RATIO : 4 / 5,\r\n");
      out.write("    \r\n");
      out.write("    init : function(){\r\n");
      out.write("        var index = this.column * this.renderer.ROW + this.row;\r\n");
      out.write("        this.width = Math.min(this.renderer.width, this.renderer.height) * this.WIDTH_RATIO;\r\n");
      out.write("        this.height = Math.min(this.renderer.width, this.renderer.height) * this.HEIGHT_RATIO;\r\n");
      out.write("        this.axis = [\r\n");
      out.write("            {x : this.renderer.width / 2, y : this.renderer.height / 2},\r\n");
      out.write("            {x : this.renderer.width / 4 + this.renderer.width / 2 * (this.row % 2), y : this.renderer.height / 4 + this.renderer.height / 2 * Math.floor(this.row / 2)},\r\n");
      out.write("            {x : this.width * 2, y : this.renderer.height / 8 + this.height / 2 + this.renderer.height / 4 * this.row},\r\n");
      out.write("            {x : this.width / 2 + (this.renderer.width - this.width * 3 / 2) * this.column / this.renderer.COLUMN, y : this.renderer.height / 8 + this.height / 2 + this.renderer.height / 4 * this.row},\r\n");
      out.write("            {x : this.width / 2 + (this.renderer.width - this.width * 2) * index / this.renderer.ROW / this.renderer.COLUMN, y : this.renderer.height / 2 + this.height / 2},\r\n");
      out.write("            {x : this.width / 2 + (this.renderer.width - this.width * 2) * index / this.renderer.ROW / this.renderer.COLUMN, y : this.height * 3 / 2 + (this.renderer.height - this.height * 2) * (1 - Math.abs(1 - index / this.renderer.ROW / this.renderer.COLUMN * 2))},\r\n");
      out.write("            {x : this.renderer.width / 6 + this.renderer.width / 3 * (this.column % 3), y : this.renderer.height / 10 + this.height / 2 + this.renderer.height / 4 * Math.floor(this.column / 3)},\r\n");
      out.write("            {x : this.renderer.width / 2, y : this.renderer.height / 2}\r\n");
      out.write("        ];\r\n");
      out.write("        this.radian = [index / this.renderer.ROW / this.renderer.COLUMN, this.column / this.renderer.COLUMN, this.row / (this.renderer.ROW - 1)];\r\n");
      out.write("        this.scale = this.SCALE_RATIO * this.row / (this.renderer.ROW - 1);\r\n");
      out.write("        this.hue = this.radian[0] * 360 | 0;\r\n");
      out.write("    },\r\n");
      out.write("    controlStatus : function(context, status, rate){\r\n");
      out.write("        if(status == 0){\r\n");
      out.write("            this.x = this.axis[status].x;\r\n");
      out.write("            this.y = this.axis[status].y;\r\n");
      out.write("        }else{\r\n");
      out.write("            var next = (status == this.renderer.MAX_STATUS) ? 0 : status;\r\n");
      out.write("            this.x = this.axis[status - 1].x + (this.axis[next].x - this.axis[status - 1].x) * rate;\r\n");
      out.write("            this.y = this.axis[status - 1].y + (this.axis[next].y - this.axis[status - 1].y) * rate;\r\n");
      out.write("        }\r\n");
      out.write("        switch(status){\r\n");
      out.write("        case 0:\r\n");
      out.write("            context.rotate(this.radian[0] * Math.PI * 2 * rate);\r\n");
      out.write("            context.translate(0, -this.height);\r\n");
      out.write("            break;\r\n");
      out.write("        case 1:\r\n");
      out.write("            context.rotate(this.translateAngle(this.radian[0] * Math.PI * 2, this.radian[1] * Math.PI * 2, rate));\r\n");
      out.write("            context.translate(0, -this.height * (1 - rate));\r\n");
      out.write("            break;\r\n");
      out.write("        case 2:\r\n");
      out.write("            context.rotate(this.translateAngle(this.radian[1] * Math.PI * 2, Math.PI * 2, rate));\r\n");
      out.write("            break;\r\n");
      out.write("        case 6:\r\n");
      out.write("            context.rotate((this.radian[2] * Math.PI / 2 - Math.PI / 4) * rate);\r\n");
      out.write("            context.translate(-this.width / 2 * rate, 0);\r\n");
      out.write("            break;\r\n");
      out.write("        case 7:\r\n");
      out.write("            context.rotate(this.translateAngle(this.radian[2] * Math.PI / 2 - Math.PI / 4, this.radian[1] * Math.PI * 2, rate));\r\n");
      out.write("            context.scale(1 - this.scale * rate, 1 - this.scale * rate);\r\n");
      out.write("            context.translate(-this.width / 2, -this.height * 3 * rate);\r\n");
      out.write("            break;\r\n");
      out.write("        case 8:\r\n");
      out.write("            context.rotate(this.translateAngle(this.radian[1] * Math.PI * 2, this.radian[0] * Math.PI * 2, rate));\r\n");
      out.write("            context.scale(1 - this.scale * (1 - rate), 1 - this.scale * (1 - rate));\r\n");
      out.write("            context.translate(-this.width / 2 * (1 - rate), this.height * (2 * rate - 3));\r\n");
      out.write("        }\r\n");
      out.write("    },\r\n");
      out.write("    translateAngle : function(source, destination, rate){\r\n");
      out.write("        return source + (destination - source) * rate;\r\n");
      out.write("    },\r\n");
      out.write("    render : function(context, status, rate){\r\n");
      out.write("        context.save();\r\n");
      out.write("        context.translate(this.x, this.y);\r\n");
      out.write("        this.controlStatus(context, status, rate);\r\n");
      out.write("        context.lineWidth = this.width / 20;\r\n");
      out.write("        context.strokeStyle = 'hsl(' + this.hue + ', 60%, 90%)';\r\n");
      out.write("        context.fillStyle = 'hsl(' + this.hue + ', 60%, 60%)';\r\n");
      out.write("        context.fillRect(0, -this.height, this.width, this.height);\r\n");
      out.write("        context.strokeRect(0, -this.height, this.width, this.height);\r\n");
      out.write("        context.restore();\r\n");
      out.write("    }\r\n");
      out.write("};\r\n");
      out.write("$(function(){\r\n");
      out.write("    RENDERER.init();\r\n");
      out.write("});\r\n");
      out.write("        \r\n");
      out.write("    </script>\r\n");
      out.write(" \t\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
